#!/usr/bin/env nodevar http = require("http")var https = require("https")var fs = require("fs")require("../config").init()var debug = require('debug')('ozanam-gala:');//init the mongo db connectionrequire('mongo-repo').db.init(process.env.MONGO, function(err) {  if (err) logger.log(err)})var app = require('../app');app.set('port', process.env.PORT || 3000);app.set('port_ssl', process.env.PORTSSL || 8000);app.set('hostname', process.env.HOSTNAME)app.set('hostname_ssl', process.env.HOSTNAMESSL)app.set('ssl_private', process.env.SSL_PRIVATE)app.set('ssl_cert', process.env.SSL_CERT)app.set('local_ssl', /yes/i.test(process.env.LOCALSSL))if (process.env.SSL_CA)  app.set('ssl_ca_certs', process.env.SSL_CA.split(","))//HTTP servervar serverHttp = http.createServer(app)serverHttp.on('error', function(err) {  console.error(err)})serverHttp.listen(app.get('port'), function(){  debug('Express server listening on port ' + app.get('port'));});//HTTPS serverif (process.env.ENABLESSL === 'yes' && app.get('local_ssl')) {  var https = require("https")  var options = {    key: fs.readFileSync('private/' + app.get("ssl_private")),    cert: fs.readFileSync('private/' + app.get("ssl_cert"))  };  var files = app.get('ssl_ca_certs')  if (files) {    var file, _i, _len, ca;    ca = []    for (_i = 0, _len = files.length; _i < _len; _i++) {      file = files[_i];      ca.push(fs.readFileSync("private/" + file));    }    options.ca = ca  }  var serverSSL = https.createServer(options, app)  serverSSL.on('error', function(err) {    if (err) debug(err)  })  serverSSL.listen(app.get('port_ssl'), function() {    debug('Express server listening on port ' + app.get('port_ssl'));  });}process.on('uncaughtException', function (err) {  console.error('uncaughtException:', err.message)  console.log(err.stack)  process.exit(1)})process.on('exit', function() {  debug('closing db connections...')  require('mongo-repo').db.close()});